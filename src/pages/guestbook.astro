---
import Layout from "@layouts/Layout.astro";
import { Image } from "astro:assets";
import GuestbookPostBox from "@components/GuestbookPostBox.astro";
import { GH_API } from "astro:env/server";

interface Author {
  login: string;
  avatarUrl: string;
}

interface Comment {
  author: Author;
  body: string;
  createdAt: string;
}

interface Discussion {
  title: string;
  comments: {
    nodes: Comment[];
  };
}

interface Repository {
  discussion: Discussion;
}

interface GraphQLResponse {
  data?: {
    repository: Repository;
  };
}

async function getGuestbookPosts(): Promise<GraphQLResponse> {
  let results = await fetch("https://api.github.com/graphql", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `bearer ${GH_API}`,
    },
    body: JSON.stringify({
      query: `{
        repository(owner: "sebdanielsson", name: "sebdanielsson.github.io") {
          discussion(number: 9) {
            title
            comments(last: 100) {
              nodes {
                author {
                  login
                  avatarUrl
                }
                body
                createdAt
              }
            }
          }
        }
      }`,
    }),
  });

  let guestbookPostsResponse: GraphQLResponse =
    (await results.json()) as GraphQLResponse;
  return guestbookPostsResponse;
}

const guestbookPostsResponse = await getGuestbookPosts();
const guestbookPosts =
  guestbookPostsResponse.data?.repository?.discussion?.comments?.nodes || [];
---

<Layout title="Guestbook">
  <main class="main-width py-12">
    <!-- <h1>Guestbook</h1> -->
    <div class="relative py-6">
      <Image
        src="/img/kilroy.svg"
        alt="Kilroy"
        width={736}
        height={323}
        loading="eager"
        class="mx-auto w-3/4 text-white md:w-1/2"
      />
      <button
        id="guestbook-post-button"
        class="absolute right-0 ml-auto -translate-y-[100%] rounded-xl bg-[var(--accent-main)] px-4 py-2 text-base font-semibold text-white hover:bg-[var(--accent-dark)]"
      >
        Post
      </button>
    </div>
    <div id="giscus-post" class="">
      <span class="text-sm text-neutral-400"
        >Powered by <a href="https://giscus.app" target="_blank">gisqus</a>.
        Comments will be added to the page shortly after posting.</span
      >
      <section class="giscus"></section>
    </div>
    <div
      class="mt-12 flex flex-col flex-wrap justify-between gap-12 md:flex-row"
    >
      {
        guestbookPosts.map((post) => (
          <div class="post-container flex flex-auto sm:justify-around">
            <GuestbookPostBox post={post} />
          </div>
        ))
      }
    </div>
  </main>
</Layout>

<style>
  #giscus-post {
    max-height: 1px;
    transition: max-height 0.5s ease-out;
    overflow: hidden;
  }

  @media screen and (width >= 768px) {
    .post-container:nth-child(1),
    .post-container:nth-child(2),
    .post-container:nth-child(3) {
      flex-basis: 25%;
    }

    .post-container:nth-child(4) {
      flex-basis: 30%;
      margin-left: 15%;
    }

    .post-container:nth-child(5) {
      flex-basis: 30%;
      margin-right: 15%;
    }
  }

  @media screen and (width <= 767px) {
    .post-container {
      transform: rotate(0deg) !important;
    }
  }
</style>

<script is:inline>
  // Randomly rotate posts
  document.querySelectorAll(".post-container").forEach((post) => {
    const randomDegree = Math.random() * 30 - 15;
    post.style.transform = `rotate(${randomDegree}deg)`;
  });

  // Add event listener to post button
  document
    .getElementById("guestbook-post-button")
    .addEventListener("click", toggleGuestbookPost);

  // Post button logic
  function toggleGuestbookPost() {
    const guestbookPost = document.getElementById("giscus-post");
    const guestbookPostButton = document.getElementById(
      "guestbook-post-button"
    );
    if (guestbookPost.style.maxHeight === "500px") {
      guestbookPost.style.maxHeight = "1px";
      guestbookPostButton.style.backgroundColor = "";
      guestbookPostButton.innerHTML = "Post";
    } else {
      guestbookPost.style.maxHeight = "500px";
      guestbookPostButton.style.backgroundColor = "red";
      guestbookPostButton.innerHTML = "Close";
    }
  }

  // Inject Giscus script
  document.addEventListener("astro:page-load", () => {
    injectGiscusScript();
  });

  function injectGiscusScript() {
    const script = document.createElement("script");

    script.setAttribute("src", "https://giscus.app/client.js");
    script.setAttribute("data-repo", "sebdanielsson/sebdanielsson.github.io");
    script.setAttribute("data-repo-id", "R_kgDOJITMkA");
    script.setAttribute("data-category", "Guestbook");
    script.setAttribute("data-category-id", "DIC_kwDOJITMkM4CcDrE");
    script.setAttribute("data-mapping", "pathname");
    script.setAttribute("data-strict", "0");
    script.setAttribute("data-reactions-enabled", "0");
    script.setAttribute("data-emit-metadata", "0");
    script.setAttribute("data-input-position", "bottom");
    script.setAttribute(
      "data-theme",
      "https://sebdanielsson.dev/styles/giscus-dark.css"
    );
    script.setAttribute("data-lang", "en");
    script.setAttribute("crossorigin", "anonymous");
    script.setAttribute("async", "");

    const div = document.getElementById("giscus-post");
    if (div) {
      div.appendChild(script);
    } else {
      console.error("Div with ID giscus-post not found.");
    }
  }
</script>
